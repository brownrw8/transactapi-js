"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
/**
 * This method is used to update a specific account (createAccount).
 * @link https://api.norcapsecurities.com/admin_v3/documentation?mid=MTM1
 *
 * @typedef {Object} UpdateAccountRequest
 * @property {string} clientID - Transact API Client ID
 * @property {string} developerAPIKey - Transact API Developer Key
 * @property {string} accountId - Account ID that is generated by the API once an account is created (createAccount).
 * @property {string} accountRegistration - Investor Account Name - the exact registration of the account, such as "John Doe and Jane Doe JTWROS" or "John Doe IRA" or "Doe Family Trust"
 * @property {string} [type] - Individual, Entity, TIC, JTWROS, IRA, SepIRA, ROTH,Joint
 * @property {string} [entityType] - Revocable Trust, Irrevocable Trust, Limited Partnership, LLC, Corporation
 * @property {string} [domesticYN] - Domestic or International Account
 * @property {string} [streetAddress1] - Street Address Line 1
 * @property {string} [streetAddress2] - Street Address Line 2
 * @property {string} [city] - Account City
 * @property {string} [state] - Account State (Optional for non-U.S. parties)
 * @property {string} [zip] - Account Zip/Postal Code
 * @property {string} [country] - Account Country
 * @property {string} [phone] - Account Primary Phone Number
 * @property {string} [KYCstatus] - Know Your Customer(KYC) Status: Pending, Auto Approved, Manually Approved, Disapproved. Default status is "Pending"
 * @property {string} [AMLstatus] - Anti-Money Laundering(AML) Status: Pending, Auto Approved, Manually Approved, Disapproved. Default status is "Pending" * @property {string} [AccreditedStatus] - The Accreditation Status for the Account: Pending, Self Accredited, Verified Accredited, Not Accredited. Default status is "Pending"
 * @property {string} [ApprovalStatus] - Principal Approval Status: Pending, Approved, Not Approved
 *
 * @typedef {Object} AccountDetail
 * @property {string} accountId - ID for an account
 * @property {string} suitabilityScore - Score from 1 to 5. 5 being most suitable and 1 being least suitable.
 * @property {string} approvalStatus - Principal Approval Status: Pending, Approved, Not Approved
 *
 * @typedef {Object} UpdateAccountResponse
 * @property {string} statusCode - API Status Code
 * @property {string} statusDesc - API Status Description
 * @property {Array<AccountDetail>} - Details regarding an account
 *
 * @params {UpdateAccountRequest}
 * @returns UpdateAccountResponse
 */
function default_1(_a) {
    var { clientID, developerAPIKey, accountId, accountRegistration } = _a, other = __rest(_a, ["clientID", "developerAPIKey", "accountId", "accountRegistration"]);
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = Object.assign({ clientID,
                developerAPIKey,
                accountId,
                accountRegistration }, other);
            return yield (0, base_1.baseApi)("PUT", "updateAccount", payload);
        }
        catch (error) {
            throw new Error(error.message);
        }
    });
}
exports.default = default_1;
