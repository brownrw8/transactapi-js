"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
/**
 * TThis method is used to move funds from external bank account to the NCPS escrow account. Transactions are batch processed each business day at 6pm ET. The amount is limited to $100,000.00.
 * @link https://api.norcapsecurities.com/admin_v3/documentation?mid=MjE5
 * @param {string} clientID Transact API Client ID
 * @param {string} developerAPIKey Transact API Developer Key
 * @param {string} accountId Account ID that is generated by the API once an account is created(createAccount)
 * @param {string} offeringId Offering ID that is generated by the API once an offering is created(createOffering)
 * @param {string} tradeId Trade ID that is generated by the API once an trade is created(createTrade). A trade must be created before externalFundMove can be performed.
 * @param {string} NickName Nickname given to the external account
 * @param {number} amount The amount to be debited from the external account. The amount is limited to $100,000.00.
 * @param {string} description Description of the fund move (i.e. "Investment in [offering].").
 * @param {string} checkNumber Check number should be the same as trade id
 * @returns {string} statusCode - API Status Code
 * @returns {string} statusDesc - API Status Description
 * @returns {string} accountId - Account ID, referenced from request
 * @returns {string} tradeId - Trade ID, referenced from request
 * @returns {string} offeringId - Offering ID, referenced from request
 * @returns {string} totalAmount - Amount, referenced from request
 * @returns {string} RefNum - Reference number, generated
 * @returns {string} fundStatus - State of the funding process
 */
function default_1({ clientID, developerAPIKey, accountId, offeringId, tradeId, NickName, amount, description, checkNumber, }) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                clientID,
                developerAPIKey,
                accountId,
                offeringId,
                tradeId,
                NickName,
                amount,
                description,
                checkNumber,
            };
            return yield (0, base_1.baseApi)("POST", "externalFundMove", payload);
        }
        catch (error) {
            throw new Error(error.message);
        }
    });
}
exports.default = default_1;
