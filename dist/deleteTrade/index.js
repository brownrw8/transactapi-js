"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
/**
 * This method is used to create a trade/investment for an offering. This requires Account ID and total number of units/shares to be purchased by the account. Creating a trade represents the intention to invest and does NOT initiate any sort of fund move. To initiate an ACH transfer for a trade, you will need to use the externalFundMove method.
 * @link https://api.norcapsecurities.com/admin_v3/documentation?mid=MjA0
 * @param {string} clientID - Transact API Client ID
 * @param {string} developerAPIKey - Transact API Developer Key
 * @param {string} tradeId - Trade ID that is generated by the API when a trade is created.
 * @param {string} accountId - Account ID of the account that is investing (This account should have one Primary Party)
 * @param {string} errDesc - Any error message (optional)
 */
function default_1({ clientID, developerAPIKey, tradeId, accountId, errDesc }) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const payload = {
                clientID,
                developerAPIKey,
                tradeId,
                accountId,
                errDesc
            };
            return yield (0, base_1.baseApi)("POST", "deleteTrade", payload);
        }
        catch (error) {
            throw new Error(error.message);
        }
    });
}
exports.default = default_1;
